a. 

b.

c. 

CREATE TABLE chain (
  address_central_office varchar(255) PRIMARY KEY,
  contact_email_address varchar(255),
  contact_phone_num varchar(20)
);

CREATE TABLE hotel (
  address_of_hotel varchar(255) PRIMARY KEY,
  address_central_office varchar(255),
  ranking int,
  contact_email_address varchar(255),
  contact_phone_num varchar(20),
  manager_ssn_or_sin varchar(20),
  FOREIGN KEY (address_central_office) REFERENCES chain(address_central_office),
  FOREIGN KEY (manager_ssn_or_sin) REFERENCES employee(ssn_or_sin)
);

CREATE TABLE room (
  address_of_hotel varchar(255),
  room_id varchar(20),
  room_price_cents int,
  capacity int,
  extended_capacity int,
  problems_or_damages varchar(255),
  PRIMARY KEY (address_of_hotel, room_id),
  FOREIGN KEY (address_of_hotel) REFERENCES hotel(address_of_hotel)
);

CREATE TABLE amenity (
  name varchar(255) PRIMARY KEY
);

CREATE TABLE offers (
  address_of_hotel varchar(255),
  room_id varchar(20),
  amenity_name varchar(255),
  PRIMARY KEY (address_of_hotel, room_id, amenity_name),
  FOREIGN KEY (address_of_hotel, room_id) REFERENCES room(address_of_hotel, room_id),
  FOREIGN KEY (amenity_name) REFERENCES amenity(name)
);

CREATE TABLE customer (
  ssn_or_sin varchar(20) PRIMARY KEY,
  full_name varchar(255),
  address varchar(255),
  registration_date date
);

CREATE TABLE employee (
  ssn_or_sin varchar(20) PRIMARY KEY,
  full_name varchar(255),
  address varchar(255)
);

CREATE TABLE manager (
  manager_ssn_or_sin varchar(20),
  managed_ssn_or_sin varchar(20),
  PRIMARY KEY (manager_ssn_or_sin, managed_ssn_or_sin),
  FOREIGN KEY (manager_ssn_or_sin) REFERENCES employee(ssn_or_sin),
  FOREIGN KEY (managed_ssn_or_sin) REFERENCES employee(ssn_or_sin)
);

CREATE TABLE role (
  name varchar(255) PRIMARY KEY
);

CREATE TABLE employment (
  address_of_hotel varchar(255),
  employee_ssn_or_sin varchar(20),
  role_name varchar(255),
  PRIMARY KEY (address_of_hotel, employee_ssn_or_sin, role_name),
  FOREIGN KEY (address_of_hotel) REFERENCES hotel(address_of_hotel),
  FOREIGN KEY (employee_ssn_or_sin) REFERENCES employee(ssn_or_sin),
  FOREIGN KEY (role_name) REFERENCES role(name)
);

CREATE TABLE booking_or_renting (
  address_of_hotel varchar(255),
  room_id varchar(20),
  start date,
  customer_ssn_or_sin varchar(20),
  end date,
  was_booked boolean,
  is_renting boolean,
  PRIMARY KEY (address_of_hotel, room_id, start),
  FOREIGN KEY (address_of_hotel, room_id) REFERENCES room(address_of_hotel, room_id),
  FOREIGN KEY (customer_ssn_or_sin) REFERENCES customer(ssn_or_sin)
);

Part 6

1. Query to insert a new hotel chain with its central office details:

INSERT INTO hotel_chain (name, central_office_address, number_of_hotels, contact_email, contact_phone)
VALUES ('Hilton', '123 Main St, New York, NY', 50, 'info@hilton.com', '1-800-123-4567');




2. Trigger to delete all rooms in a hotel when the hotel is deleted from the database:

CREATE TRIGGER delete_hotel
AFTER DELETE ON hotel
FOR EACH ROW
BEGIN
    DELETE FROM room WHERE hotel_id = OLD.id;
END;




3. Query to update the capacity of a room:

    UPDATE room SET capacity = 'Triple' WHERE id = 12345;




4. Query to search for available rooms in a hotel chain for a specific date range:

    SELECT room.id, room.hotel_id, room.capacity, room.price, hotel.name
FROM room
INNER JOIN hotel ON room.hotel_id = hotel.id
WHERE room.id NOT IN (
    SELECT room_id FROM booking
    WHERE check_in_date <= '2023-04-15' AND check_out_date >= '2023-04-10'
)
AND hotel.hotel_chain_id = 1;


5. Trigger to update the number of rooms in a hotel when a new room is added:

    CREATE TRIGGER update_num_rooms
AFTER INSERT ON room
FOR EACH ROW
BEGIN
UPDATE hotel SET number_of_rooms = number_of_rooms + 1 WHERE id = NEW.hotel_id;
END;




6. Query to delete a customer and all of their bookings from the database:

    DELETE FROM customer WHERE id = 54321;
    DELETE FROM booking WHERE customer_id = 54321;










Part 7

1. Index on the "hotel" table for the "address_central_office" column:


CREATE INDEX hotel_hotel_chain_id_idx ON hotel (address_central_office);


This index would be useful for queries that involve filtering hotels by their hotel chain. For example,
if a user wants to see all hotels belonging to a specific hotel chain, the database could use this index to quickly
find all hotels with the corresponding "address_central_office" value.




2. Index on the "room" table for the "address_of_hotel" column:



CREATE INDEX room_hotel_id_idx ON room (address_of_hotel);



This index would be useful for queries that involve filtering rooms by their hotel. For example,
if a user wants to see all rooms available at a specific hotel, the database could use this index to quickly
find all rooms with the corresponding "address_of_hotel" value.




3. Index on the "customer" table for the "registration_date" column:



CREATE INDEX customer_registration_date_idx ON customer (registration_date);



This index would be useful for queries that involve filtering customers by their registration date.
For example, if a user wants to see all customers who registered during a specific time period,
the database could use this index to quickly find all customers with registration dates falling within the specified range.





Part 9

View 1: Number of available rooms per area

CREATE VIEW available_rooms_per_area AS
SELECT h.address_of_hotel, h.area_of_hotel, COUNT(r.room_id) AS available_rooms
FROM Hotel h
INNER JOIN room r ON h.address_of_hotel = r.address_of_hotel
LEFT JOIN booking_or_renting rt ON r.room_id = rt.room_id
AND rt.start_date <= NOW() AND rt.end_date >= NOW()
WHERE rt.address_of_hotel IS NULL
GROUP BY h.address_of_hotel, h.area_of_hotel;


View 2: Capacity of all rooms of a specific hotel

CREATE VIEW room_capacity_per_hotel AS
SELECT r.address_of_hotel, r.capacity, COUNT(r.room_id) AS room_count
FROM Room r
GROUP BY r.address_of_hotel, r.capacity;



