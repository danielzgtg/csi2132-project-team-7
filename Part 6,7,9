Part 6

1. Query to insert a new hotel chain with its central office details:

INSERT INTO hotel_chain (name, central_office_address, number_of_hotels, contact_email, contact_phone)
VALUES ('Hilton', '123 Main St, New York, NY', 50, 'info@hilton.com', '1-800-123-4567');




2. Trigger to delete all rooms in a hotel when the hotel is deleted from the database:

CREATE TRIGGER delete_hotel
AFTER DELETE ON hotel
FOR EACH ROW
BEGIN
    DELETE FROM room WHERE hotel_id = OLD.id;
END;




3. Query to update the capacity of a room:

    UPDATE room SET capacity = 'Triple' WHERE id = 12345;




4. Query to search for available rooms in a hotel chain for a specific date range:

    SELECT room.id, room.hotel_id, room.capacity, room.price, hotel.name
FROM room
INNER JOIN hotel ON room.hotel_id = hotel.id
WHERE room.id NOT IN (
    SELECT room_id FROM booking
    WHERE check_in_date <= '2023-04-15' AND check_out_date >= '2023-04-10'
)
AND hotel.hotel_chain_id = 1;


5. Trigger to update the number of rooms in a hotel when a new room is added:

    CREATE TRIGGER update_num_rooms
AFTER INSERT ON room
FOR EACH ROW
BEGIN
UPDATE hotel SET number_of_rooms = number_of_rooms + 1 WHERE id = NEW.hotel_id;
END;




6. Query to delete a customer and all of their bookings from the database:

    DELETE FROM customer WHERE id = 54321;
    DELETE FROM booking WHERE customer_id = 54321;










Part 7

1. Index on the "hotel" table for the "hotel_chain_id" column:

 
CREATE INDEX hotel_hotel_chain_id_idx ON hotel (hotel_chain_id);

 
This index would be useful for queries that involve filtering hotels by their hotel chain. For example, 
if a user wants to see all hotels belonging to a specific hotel chain, the database could use this index to quickly 
find all hotels with the corresponding "hotel_chain_id" value. 




2. Index on the "room" table for the "hotel_id" column:

 

CREATE INDEX room_hotel_id_idx ON room (hotel_id);

 

This index would be useful for queries that involve filtering rooms by their hotel. For example, 
if a user wants to see all rooms available at a specific hotel, the database could use this index to quickly 
find all rooms with the corresponding "hotel_id" value. 




3. Index on the "customer" table for the "registration_date" column:

 

CREATE INDEX customer_registration_date_idx ON customer (registration_date);

 

This index would be useful for queries that involve filtering customers by their registration date. 
For example, if a user wants to see all customers who registered during a specific time period, 
the database could use this index to quickly find all customers with registration dates falling within the specified range.





Part 9

View 1: Number of available rooms per area

CREATE VIEW available_rooms_per_area AS
SELECT h.hotel_id, h.area, COUNT(r.room_id) AS available_rooms
FROM Hotel h
INNER JOIN Room r ON h.hotel_id = r.hotel_id
LEFT JOIN Renting rt ON r.room_id = rt.room_id
    AND rt.start_date <= NOW() AND rt.end_date >= NOW()
WHERE rt.renting_id IS NULL
GROUP BY h.hotel_id, h.area;


View 2: Capacity of all rooms of a specific hotel

CREATE VIEW room_capacity_per_hotel AS
SELECT r.hotel_id, r.capacity, COUNT(r.room_id) AS room_count
FROM Room r
WHERE r.hotel_id = <hotel_id>
GROUP BY r.hotel_id, r.capacity;


